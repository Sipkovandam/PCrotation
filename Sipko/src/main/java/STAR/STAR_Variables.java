package STAR;

import java.io.Serializable;

import Tools.Script;

public class STAR_Variables implements Cloneable, Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -6761091153449287175L;
	// STAR specific arguments
	private String genomeDirComment = "/root/genomeDir/; MANDATORY //genome directory readily build using STAR, make sure you use the same settings when creating this directory build the genome";
	private String genomeDir = "";
	private String maxMemoryGenomeBuildComment = "100gb; MANDATORY // Maximum amount of memory the node can to rebuild the genome after the first pass";
	private String maxMemoryGenomeBuild = "180gb";
	private String gTFfileComment = "/root/directory/annotationfile.gtf; MANDATORY // gtf file is used by featurecounts to identify exon boundarys for the expression per exon. Should be the same file as the file used to build the genome (genomeDir)";
	private String gTFfile = null;
	
	private String sjdbFileChrStartEndComment = "/root/directory/spliceJunctionFile.out.tab; optional // splice junction file from which additional splice junctions are obtained when (re)building the genome index files for STAR";
	private String sjdbFileChrStartEnd = null;
	private String outModeComment = "options are: None/BAM/SAM Sorted/Unsorted; optional // Option to indicate a certain output mode (None --> no BAM or SAM file is created)";
	private String outMode = "BAM Unsorted";
	private String keepBAMsContainingComment = "RNA14-00231_S1,RNA14-00254_S7,RNA14-00258_S4; OPTIONAL // Comma separated list of strings. If any of these strings are present in the input files the resulting BAM files are stored after mapping in the second pass";
	private String[] keepBAMsContaining = new String[]{"RNA14-00231_S1","RNA14-00254_S7","RNA14-00258_S4"};//if a bam file contains any of these strings it is kept
	private String sTAR_Extra_ArgumentsComment = "--outFilterMismatchNmax 999 --outFilterMismatchNoverLmax 0.04 --alignSJstitchMismatchNmax 1 -1 1 1 --sjdbScore 1 --outFilterMultimapNmax 1 --alignSplicedMateMapLminOverLmate 0.96 --scoreGapNoncan 0 --scoreGap -6 --scoreInsBase 1 --alignSJDBoverhangMin 12 --outSJfilterDistToOtherSJmin 0 0 0 0; OPTIONAL // Additional arguments to STAR that will be included";
	private String sTAR_Extra_Arguments = "--outFilterMismatchNmax 999 --outFilterMismatchNoverLmax 0.04";
	private String countExpressionComment = "true; OPTIONAL // Whether count output files should also be generated by STAR";
	private boolean countExpression= true;
	private String saveGenomeComment = "// Whether the genome files should be stored for future use. Useful when including the same new spice junctions in multiple runs. If true only runs over the first file of a batch.";
	private boolean saveGenome = false;
	//featureCounts arguments
	private String featureCountsComment = "/root/featurecounts/bin/featureCounts; MANDATORY // The executeable of the featurecounts version to be used";
	private String featureCounts = null;
	private String featureCountsOptionsComment = "-T 25 --largestOverlap -f -t exon -O; MANDATORY // options used by featurecounts. -f -t exon maps to exons -O makes sure reads overlapping multiple exons are also counted toward each exon they overlap";
	private String featureCountsOptions = "-p -T 25 --largestOverlap -f -t exon -O";//"-T 25 --largestOverlap -f -t exon -O"-f -t exon options make sure it counts and reports reads per exon instead of gene ,-O (capital o) option makes sure reads are counted whenever it overlaps multiple genes
	
	public String getGenomeDir() {
		return genomeDir;
	}
	public String getMaxMemoryGenomeBuild() {
		return maxMemoryGenomeBuild;
	}
	public String getGTFfile() {
		return gTFfile;
	}
	public String getSjdbFileChrStartEnd() {
		return sjdbFileChrStartEnd;
	}
	public String getOutMode() {
		return outMode;
	}
	public String[] getKeepBAMsContaining() {
		return keepBAMsContaining;
	}
	public String getSTAR_Extra_Arguments() {
		return sTAR_Extra_Arguments;
	}
	public boolean getCountExpression() {
		return countExpression;
	}
	public String getFeatureCounts() {
		return featureCounts;
	}
	public String getFeatureCountsOptions() {
		return featureCountsOptions;
	}
	public void setSTAR_Extra_Arguments(String sTAR_Extra_Arguments) {
		this.sTAR_Extra_Arguments = sTAR_Extra_Arguments;
	}
	public void setSjdbFileChrStartEnd(String sjdbFileChrStartEnd) {
		this.sjdbFileChrStartEnd = sjdbFileChrStartEnd;
	}
	public void setOutMode(String outMode) {
		this.outMode = outMode;
	}
	public String getgTFfile() {
		return gTFfile;
	}
	public void setgTFfile(String gTFfile) {
		this.gTFfile = gTFfile;
	}
	public void setsTAR_Extra_Arguments(String sTAR_Extra_Arguments) {
		this.sTAR_Extra_Arguments = sTAR_Extra_Arguments;
	}
	public void setGenomeDir(String genomeDir) {
		this.genomeDir = genomeDir;
	}
	public void setMaxMemoryGenomeBuild(String maxMemoryGenomeBuild) {
		this.maxMemoryGenomeBuild = maxMemoryGenomeBuild;
	}
	public void setKeepBAMsContaining(String[] keepBAMsContaining) {
		this.keepBAMsContaining = keepBAMsContaining;
	}
	public void setCountExpression(boolean countExpression) {
		this.countExpression = countExpression;
	}
	public void setFeatureCounts(String featureCounts) {
		this.featureCounts = featureCounts;
	}
	public void setFeatureCountsOptions(String featureCountsOptions) {
		this.featureCountsOptions = featureCountsOptions;
	}
	
	public STAR_Variables clone(String jsonFN) throws CloneNotSupportedException
	{
		return (STAR_Variables) super.clone();
	}
	public boolean isSaveGenome() {
		if(saveGenome)
		{
			if(this.sTAR_Extra_Arguments == null)
				this.sTAR_Extra_Arguments = "";
			if(!this.sTAR_Extra_Arguments.contains("sjdbInsertSave All"))
				this.sTAR_Extra_Arguments+=" --sjdbInsertSave All";
			if(!this.sTAR_Extra_Arguments.contains("limitSjdbInsertNsj"))
				this.sTAR_Extra_Arguments+=" --limitSjdbInsertNsj 10000000";
		}
		return saveGenome;
	}
	public void setSaveGenome(boolean saveGenome) {
		this.saveGenome = saveGenome;
	}
}
